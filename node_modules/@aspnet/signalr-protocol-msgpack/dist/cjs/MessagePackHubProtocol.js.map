{"version":3,"file":"MessagePackHubProtocol.js","sourceRoot":"","sources":["../../src/MessagePackHubProtocol.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { Buffer } from \"buffer\";\r\nimport * as msgpack5 from \"msgpack5\";\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, ILogger, InvocationMessage, LogLevel, MessageHeaders, MessageType, NullLogger, StreamInvocationMessage, StreamItemMessage, TransferFormat } from \"@aspnet/signalr\";\r\n\r\nimport { BinaryMessageFormat } from \"./BinaryMessageFormat\";\r\n\r\n// TypeDoc's @inheritDoc and @link don't work across modules :(\r\n\r\n/** Implements the MessagePack Hub Protocol */\r\nexport class MessagePackHubProtocol implements IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    public readonly name: string = \"messagepack\";\r\n    /** The version of the protocol. */\r\n    public readonly version: number = 1;\r\n    /** The TransferFormat of the protocol. */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Binary;\r\n\r\n    /** Creates an array of HubMessage objects from the specified serialized representation.\r\n     *\r\n     * @param {ArrayBuffer} input An ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: ArrayBuffer, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"string\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (!(input instanceof ArrayBuffer)) {\r\n            throw new Error(\"Invalid input for MessagePack hub protocol. Expected an ArrayBuffer.\");\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        return BinaryMessageFormat.parse(input).map((m) => this.parseMessage(m, logger));\r\n    }\r\n\r\n    /** Writes the specified HubMessage to an ArrayBuffer and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {ArrayBuffer} An ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): ArrayBuffer {\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n                return this.writeInvocation(message as InvocationMessage);\r\n            case MessageType.StreamInvocation:\r\n                return this.writeStreamInvocation(message as StreamInvocationMessage);\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n                throw new Error(`Writing messages of type '${message.type}' is not supported.`);\r\n            default:\r\n                throw new Error(\"Invalid message type.\");\r\n        }\r\n    }\r\n\r\n    private parseMessage(input: Uint8Array, logger: ILogger): HubMessage {\r\n        if (input.length === 0) {\r\n            throw new Error(\"Invalid payload.\");\r\n        }\r\n\r\n        const msgpack = msgpack5();\r\n        const properties = msgpack.decode(new Buffer(input));\r\n        if (properties.length === 0 || !(properties instanceof Array)) {\r\n            throw new Error(\"Invalid payload.\");\r\n        }\r\n\r\n        const messageType = properties[0] as MessageType;\r\n\r\n        switch (messageType) {\r\n            case MessageType.Invocation:\r\n                return this.createInvocationMessage(this.readHeaders(properties), properties);\r\n            case MessageType.StreamItem:\r\n                return this.createStreamItemMessage(this.readHeaders(properties), properties);\r\n            case MessageType.Completion:\r\n                return this.createCompletionMessage(this.readHeaders(properties), properties);\r\n            case MessageType.Ping:\r\n                return this.createPingMessage(properties);\r\n            case MessageType.Close:\r\n                return this.createCloseMessage(properties);\r\n            default:\r\n                // Future protocol changes can add message types, old clients can ignore them\r\n                logger.log(LogLevel.Information, \"Unknown message type '\" + messageType + \"' ignored.\");\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private createCloseMessage(properties: any[]): HubMessage {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 2) {\r\n            throw new Error(\"Invalid payload for Close message.\");\r\n        }\r\n\r\n        return {\r\n            // Close messages have no headers.\r\n            error: properties[1],\r\n            type: MessageType.Close,\r\n        } as HubMessage;\r\n    }\r\n\r\n    private createPingMessage(properties: any[]): HubMessage {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 1) {\r\n            throw new Error(\"Invalid payload for Ping message.\");\r\n        }\r\n\r\n        return {\r\n            // Ping messages have no headers.\r\n            type: MessageType.Ping,\r\n        } as HubMessage;\r\n    }\r\n\r\n    private createInvocationMessage(headers: MessageHeaders, properties: any[]): InvocationMessage {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 5) {\r\n            throw new Error(\"Invalid payload for Invocation message.\");\r\n        }\r\n\r\n        const invocationId = properties[2] as string;\r\n        if (invocationId) {\r\n            return {\r\n                arguments: properties[4],\r\n                headers,\r\n                invocationId,\r\n                target: properties[3] as string,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: properties[4],\r\n                headers,\r\n                target: properties[3],\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n    private createStreamItemMessage(headers: MessageHeaders, properties: any[]): StreamItemMessage {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 4) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n\r\n        return {\r\n            headers,\r\n            invocationId: properties[2],\r\n            item: properties[3],\r\n            type: MessageType.StreamItem,\r\n        } as StreamItemMessage;\r\n    }\r\n\r\n    private createCompletionMessage(headers: MessageHeaders, properties: any[]): CompletionMessage {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 4) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        const errorResult = 1;\r\n        const voidResult = 2;\r\n        const nonVoidResult = 3;\r\n\r\n        const resultKind = properties[3];\r\n\r\n        if (resultKind !== voidResult && properties.length < 5) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        const completionMessage = {\r\n            error: null as string,\r\n            headers,\r\n            invocationId: properties[2],\r\n            result: null as any,\r\n            type: MessageType.Completion,\r\n        };\r\n\r\n        switch (resultKind) {\r\n            case errorResult:\r\n                completionMessage.error = properties[4];\r\n                break;\r\n            case nonVoidResult:\r\n                completionMessage.result = properties[4];\r\n                break;\r\n        }\r\n\r\n        return completionMessage as CompletionMessage;\r\n    }\r\n\r\n    private writeInvocation(invocationMessage: InvocationMessage): ArrayBuffer {\r\n        const msgpack = msgpack5();\r\n        const payload = msgpack.encode([MessageType.Invocation, invocationMessage.headers || {}, invocationMessage.invocationId || null,\r\n        invocationMessage.target, invocationMessage.arguments]);\r\n\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n\r\n    private writeStreamInvocation(streamInvocationMessage: StreamInvocationMessage): ArrayBuffer {\r\n        const msgpack = msgpack5();\r\n        const payload = msgpack.encode([MessageType.StreamInvocation, streamInvocationMessage.headers || {}, streamInvocationMessage.invocationId,\r\n        streamInvocationMessage.target, streamInvocationMessage.arguments]);\r\n\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n\r\n    private readHeaders(properties: any): MessageHeaders {\r\n        const headers: MessageHeaders = properties[1] as MessageHeaders;\r\n        if (typeof headers !== \"object\") {\r\n            throw new Error(\"Invalid headers.\");\r\n        }\r\n        return headers;\r\n    }\r\n}\r\n"]}